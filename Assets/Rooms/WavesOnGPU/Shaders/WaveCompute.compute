// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> NState;
RWTexture2D<float4> NM1State;
RWTexture2D<float4> Np1State;
RWTexture2D<float4> obstaclesTex;
int2 resolution;
float3 effect;
float dispersion;
float cfl = 0.5f; //The CFL condition, named for its originators Courant, Friedrichs, and Lewy, 
//requires that the domain of dependence of the PDE must lie within the domain of dependence of 
//the finite difference scheme for each mesh point of an explicit finite difference scheme for a 
//hyperbolic PDE. Any explicit finite difference scheme that violates the CFL condition is necessarily unstable, 
//but satisfying the CFL condition does not necessarily guarantee stability.


/*
CSMain function is called for each pixel of our textures. So we get the value of each pixel
the call is associated with and call on that. The ID paramater corresponds to the individual pixel
the core is associated with. 
*/
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float ns_ij = NState[id.xy].x; //State of current pixel
    float nm1s_ij = NM1State[id.xy].x; //State of previous pixel state
    
    //Information of all neighboring pixels
    float ns_ip1j = NState[id.xy + uint2(1, 0)].x;
    float ns_ijp1 = NState[id.xy + uint2(0, 1)].x;
    float ns_im1j = NState[id.xy - uint2(1, 0)].x;
    float ns_ijm1 = NState[id.xy - uint2(0, 1)].x;
                     
    //Equation is 2 times the current pixel value minus the previous pixel value + cfl^2 then + all neighboring values - 4 times the current value
    float newWaveHeight = (ns_ij * 2) - nm1s_ij + .25 * (ns_ip1j + ns_ijp1 + ns_im1j + ns_ijm1 - 4 * ns_ij);
    newWaveHeight = newWaveHeight * dispersion; //Dispersion makes the waves dissapate
   
    //float mult = .5;
    if (id.x == floor(effect.x) && id.y == floor(effect.y))
    {
        newWaveHeight = effect.z; //add constants to make waves a little larger
    }
    
    if (obstaclesTex[id.xy].x == 1) //Reflection form obstacles (x slot is red value so in unity it is set to 255)
    {
        newWaveHeight = 0; //Arbitrary number that looks good
    }
    
    if (obstaclesTex[id.xy].y == 1)//Reflection from boat (y slot is green channel so in unity it is set to 255)
    {
        newWaveHeight = -.5;
    }
    
    //newWaveHeight += mult;
    //Debug.log(newWaveHeight);
        Np1State[id.xy] = float4(newWaveHeight, newWaveHeight, newWaveHeight, 1);
}
